{"version":3,"sources":["components/omdb-api/OmdbApi.js","App.js","reportWebVitals.js","index.js"],"names":["tableIcons","Add","forwardRef","props","ref","Check","Clear","Delete","DetailPanel","Edit","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","ThirdStateCheck","ViewColumn","OmdbApi","useState","inputVal","setInputVal","allData","setAllData","loading","setLoading","dataNum","setDataNum","respError","setRespError","noResults","setNoResults","handleSubmit","e","a","preventDefault","dataArray","split","loopIds","handleErrors","response","Error","console","log","ok","statusText","dArray","arrayBuilder","map","d","fetch","process","then","json","data","push","catch","error","setTimeout","length","Response","renderMaterialData","i","rtString","Runtime","substring","date","Released","dateArray","month","day","year","convertDate","posterImg","Poster","imdbId","imdbID","title","Title","runtime","releaseYear","Year","director","Director","writer","Writer","actors","Actors","genre","Genre","language","Language","country","Country","releaseDate","posterUrl","className","onSubmit","type","onChange","target","value","Alert","variant","Spinner","animation","role","icons","options","exportButton","filtering","columns","field","render","rowData","src","alt","style","width","export","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"qlBA0BMA,EAAa,CACjBC,IAAKC,sBAAW,SAACC,EAAOC,GAAR,OAAgB,cAAC,IAAD,2BAAYD,GAAZ,IAAmBC,IAAKA,QACxDC,MAAOH,sBAAW,SAACC,EAAOC,GAAR,OAAgB,cAAC,IAAD,2BAAWD,GAAX,IAAkBC,IAAKA,QACzDE,MAAOJ,sBAAW,SAACC,EAAOC,GAAR,OAAgB,cAAC,IAAD,2BAAWD,GAAX,IAAkBC,IAAKA,QACzDG,OAAQL,sBAAW,SAACC,EAAOC,GAAR,OAAgB,cAAC,IAAD,2BAAmBD,GAAnB,IAA0BC,IAAKA,QAClEI,YAAaN,sBAAW,SAACC,EAAOC,GAAR,OACtB,cAAC,IAAD,2BAAkBD,GAAlB,IAAyBC,IAAKA,QAEhCK,KAAMP,sBAAW,SAACC,EAAOC,GAAR,OAAgB,cAAC,IAAD,2BAAUD,GAAV,IAAiBC,IAAKA,QACvDM,OAAQR,sBAAW,SAACC,EAAOC,GAAR,OAAgB,cAAC,IAAD,2BAAaD,GAAb,IAAoBC,IAAKA,QAC5DO,OAAQT,sBAAW,SAACC,EAAOC,GAAR,OAAgB,cAAC,IAAD,2BAAgBD,GAAhB,IAAuBC,IAAKA,QAC/DQ,UAAWV,sBAAW,SAACC,EAAOC,GAAR,OAAgB,cAAC,IAAD,2BAAeD,GAAf,IAAsBC,IAAKA,QACjES,SAAUX,sBAAW,SAACC,EAAOC,GAAR,OAAgB,cAAC,IAAD,2BAAcD,GAAd,IAAqBC,IAAKA,QAC/DU,SAAUZ,sBAAW,SAACC,EAAOC,GAAR,OAAgB,cAAC,IAAD,2BAAkBD,GAAlB,IAAyBC,IAAKA,QACnEW,aAAcb,sBAAW,SAACC,EAAOC,GAAR,OACvB,cAAC,IAAD,2BAAiBD,GAAjB,IAAwBC,IAAKA,QAE/BY,YAAad,sBAAW,SAACC,EAAOC,GAAR,OAAgB,cAAC,IAAD,2BAAWD,GAAX,IAAkBC,IAAKA,QAC/Da,OAAQf,sBAAW,SAACC,EAAOC,GAAR,OAAgB,cAAC,IAAD,2BAAYD,GAAZ,IAAmBC,IAAKA,QAC3Dc,UAAWhB,sBAAW,SAACC,EAAOC,GAAR,OAAgB,cAAC,IAAD,2BAAmBD,GAAnB,IAA0BC,IAAKA,QACrEe,gBAAiBjB,sBAAW,SAACC,EAAOC,GAAR,OAAgB,cAAC,IAAD,2BAAYD,GAAZ,IAAmBC,IAAKA,QACpEgB,WAAYlB,sBAAW,SAACC,EAAOC,GAAR,OAAgB,cAAC,IAAD,2BAAgBD,GAAhB,IAAuBC,IAAKA,SAiStDiB,MA9Rf,WACE,IAEA,EAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAA8BN,mBAAS,KAAvC,mBAAOO,EAAP,KAAgBC,EAAhB,KACA,EAAkCR,mBAAS,IAA3C,mBAAOS,EAAP,KAAkBC,EAAlB,KACA,EAAkCV,mBAAS,IAA3C,mBAAOW,EAAP,KAAkBC,EAAlB,KAMMC,EAAY,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sDACnBD,EAAEE,iBAEFJ,EAAa,IACbF,EAAa,IACPO,EAAYhB,EAASiB,MAAM,KACjCC,EAAQF,GANW,2CAAH,sDASlB,SAASG,EAAaC,GAGpB,GAFAX,EAAaW,EAASC,OACtBC,QAAQC,IAAIH,EAASC,OACjBD,EAASC,MAAO,MAAMA,MAAMD,EAASC,OACzC,IAAKD,EAASI,GAAI,MAAMH,MAAMD,EAASK,YACvC,OAAOL,EAKT,IAAMF,EAAU,SAACQ,GACfrB,GAAW,GACX,IAAIsB,EAAe,GAEnBD,EAAOE,KAAI,SAACC,GACV,OAAOC,MAAM,8BAAD,OAA+BD,EAA/B,mBArCDE,aAsCRC,KAAKb,GACLa,MAAK,SAACZ,GAAD,OAAcA,EAASa,UAC5BD,MAAK,SAACE,GACLP,EAAaQ,KAAKD,MAEnBE,OAAM,SAACC,GAAD,OAAWf,QAAQC,IAAI,UAAYc,SAE9ClC,EAAWwB,GAEXW,YAAW,WACTjC,GAAW,GAEiB,IAAxBsB,EAAaY,QAA6C,UAA7BZ,EAAa,GAAGa,UAC/C7B,EAAa,oBACbJ,EAAW,MAEXA,EAAWoB,EAAaY,UAEzB,MAmFCE,EAAqBvC,EACvBA,EAAQ0B,KAAI,SAACC,EAAGa,GAEd,IAAMC,EAAWd,EAAEe,QACff,EAAEe,QAAQC,UAAU,EAAGhB,EAAEe,QAAQL,OAAS,GAC1C,KACEO,EAAOjB,EAAEkB,SArFD,SAACD,GACnB,IAAIE,EAAYF,EAAK7B,MAAM,KAEvBgC,EAAQD,EAAU,GAClBE,EAAMF,EAAU,GAChBG,EAAOH,EAAU,GAErB,MAAc,QAAVC,EAEI,GAAN,OADAA,EAAQ,IACR,YAAmBC,EAAnB,YAA0BC,GACP,QAAVF,EAEH,GAAN,OADAA,EAAQ,IACR,YAAmBC,EAAnB,YAA0BC,GACP,QAAVF,EAEH,GAAN,OADAA,EAAQ,IACR,YAAmBC,EAAnB,YAA0BC,GACP,QAAVF,EAEH,GAAN,OADAA,EAAQ,IACR,YAAmBC,EAAnB,YAA0BC,GACP,QAAVF,EAEH,GAAN,OADAA,EAAQ,IACR,YAAmBC,EAAnB,YAA0BC,GACP,QAAVF,EAEH,GAAN,OADAA,EAAQ,IACR,YAAmBC,EAAnB,YAA0BC,GACP,QAAVF,EAEH,GAAN,OADAA,EAAQ,IACR,YAAmBC,EAAnB,YAA0BC,GACP,QAAVF,EAEH,GAAN,OADAA,EAAQ,IACR,YAAmBC,EAAnB,YAA0BC,GACP,QAAVF,EAEH,GAAN,OADAA,EAAQ,IACR,YAAmBC,EAAnB,YAA0BC,GACP,QAAVF,EAEH,GAAN,OADAA,EAAQ,KACR,YAAmBC,EAAnB,YAA0BC,GACP,QAAVF,EAEH,GAAN,OADAA,EAAQ,KACR,YAAmBC,EAAnB,YAA0BC,GACP,QAAVF,EAEH,GAAN,OADAA,EAAQ,KACR,YAAmBC,EAAnB,YAA0BC,QAFrB,EA6CuBC,CAAYvB,EAAEkB,UAAY,KAEpD,MAAO,CACLM,UAAWxB,EAAEyB,OACbC,OAAQ1B,EAAE2B,OACVC,MAAO5B,EAAE6B,MACTC,QAAShB,EACTiB,YAAa/B,EAAEgC,KACfC,SAAUjC,EAAEkC,SACZC,OAAQnC,EAAEoC,OACVC,OAAQrC,EAAEsC,OACVC,MAAOvC,EAAEwC,MACTC,SAAUzC,EAAE0C,SACZC,QAAS3C,EAAE4C,QACXC,YAAa5B,EACb6B,UAAW9C,EAAEyB,WAGjB,KAEJ,OACE,sBAAKsB,UAAU,MAAf,UACE,qBAAKA,UAAU,eAAf,SACE,uBAAMC,SAAUjE,EAAhB,UACE,uBAAOkE,KAAK,OAAOC,SAhKL,SAAClE,GACrBZ,EAAYY,EAAEmE,OAAOC,UAgKdzE,EACC,cAAC0E,EAAA,EAAD,CAAOC,QAAQ,SAASP,UAAU,SAAlC,SACGpE,IAED,KACJ,wBAAQsE,KAAK,SAASF,UAAU,gBAAhC,oBAGA,kDACmB,sBAAMA,UAAU,WAAhB,SAA4BtE,IAC7C,wCAAyB,IAAZA,EAAgB,QAAU,oBA0C5CF,EACC,qBAAKwE,UAAU,kBAAf,SACE,cAACQ,EAAA,EAAD,CAASC,UAAU,SAASC,KAAK,SAAjC,SACE,sBAAMV,UAAU,kBAAhB,4BAIJ,sBAAKA,UAAU,kBAAf,UACE,cAAC,IAAD,CACEW,MAAO9G,EACP+G,QAAS,CACPC,cAAc,EACdC,WAAW,GAEbC,QAAS,CACP,CACElC,MAAO,aACPmC,MAAO,YACPC,OAAQ,SAACC,GAAD,OACN,qBACEC,IAAKD,EAAQzC,UACb2C,IAAI,SACJC,MAAO,CAAEC,MAAO,OAGpBR,WAAW,EACXS,QAAQ,GAEV,CACE1C,MAAO,UACPmC,MAAO,UAET,CAAEnC,MAAO,QAASmC,MAAO,QAASd,KAAM,UACxC,CAAErB,MAAO,WAAYmC,MAAO,WAC5B,CAAEnC,MAAO,eAAgBmC,MAAO,eAChC,CAAEnC,MAAO,WAAYmC,MAAO,WAAYd,KAAM,UAC9C,CAAErB,MAAO,SAAUmC,MAAO,SAAUd,KAAM,UAC1C,CAAErB,MAAO,SAAUmC,MAAO,SAAUd,KAAM,UAC1C,CAAErB,MAAO,QAASmC,MAAO,QAASd,KAAM,UACxC,CAAErB,MAAO,WAAYmC,MAAO,WAAYd,KAAM,UAC9C,CAAErB,MAAO,oBAAqBmC,MAAO,UAAWd,KAAM,UACtD,CAAErB,MAAO,eAAgBmC,MAAO,cAAed,KAAM,QACrD,CACErB,MAAO,aACPmC,MAAO,YACPd,KAAM,SACNY,WAAW,IAGfxD,KAAMO,EACNgB,MAAM,gBAEP/C,EACC,cAACwE,EAAA,EAAD,CAAOC,QAAQ,UAAUP,UAAU,SAAnC,SACGlE,IAED,Y,OCpTC0F,MAVf,WACE,OACE,qBAAKxB,UAAU,MAAf,SACE,cAAC,EAAD,OCFSyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBvE,MAAK,YAAkD,IAA/CwE,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,OCAdO,IAAShB,OACP,cAAC,IAAMiB,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.64ba3c6d.chunk.js","sourcesContent":["// import { render } from \"@testing-library/react\";\r\nimport React, { useState, forwardRef } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\n\r\n// Bootstrap\r\n// import Table from \"react-bootstrap/Table\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\n// Material Icons\r\nimport AddBox from \"@material-ui/icons/AddBox\";\r\nimport ArrowDownward from \"@material-ui/icons/ArrowDownward\";\r\nimport Check from \"@material-ui/icons/Check\";\r\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\r\nimport Clear from \"@material-ui/icons/Clear\";\r\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport FilterList from \"@material-ui/icons/FilterList\";\r\nimport FirstPage from \"@material-ui/icons/FirstPage\";\r\nimport LastPage from \"@material-ui/icons/LastPage\";\r\nimport Remove from \"@material-ui/icons/Remove\";\r\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\r\nimport Search from \"@material-ui/icons/Search\";\r\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\r\n\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => (\r\n    <ChevronRight {...props} ref={ref} />\r\n  )),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => (\r\n    <ChevronLeft {...props} ref={ref} />\r\n  )),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\r\n};\r\n\r\nfunction OmdbApi() {\r\n  const apiKey = process.env.REACT_APP_API_KEY;\r\n\r\n  const [inputVal, setInputVal] = useState(\"\");\r\n  const [allData, setAllData] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [dataNum, setDataNum] = useState(\"0\");\r\n  const [respError, setRespError] = useState(\"\");\r\n  const [noResults, setNoResults] = useState(\"\");\r\n\r\n  const getInputValue = (e) => {\r\n    setInputVal(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    // Set these 2 to empty strings. If you don't, the errors will persist through the next search.\r\n    setNoResults(\"\");\r\n    setRespError(\"\");\r\n    const dataArray = inputVal.split(\";\");\r\n    loopIds(dataArray);\r\n  };\r\n\r\n  function handleErrors(response) {\r\n    setRespError(response.Error);\r\n    console.log(response.Error);\r\n    if (response.Error) throw Error(response.Error);\r\n    if (!response.ok) throw Error(response.statusText);\r\n    return response;\r\n  }\r\n\r\n  // This function takes the array of IDs, loops through and makes an API call for each iteration then stores it in an array. That new array will be set to the\r\n  // state object which we will use to iterate over to display the data to the user.\r\n  const loopIds = (dArray) => {\r\n    setLoading(true);\r\n    let arrayBuilder = [];\r\n\r\n    dArray.map((d) => {\r\n      return fetch(`https://www.omdbapi.com/?i=${d}&apikey=${apiKey}`)\r\n        .then(handleErrors)\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          arrayBuilder.push(data);\r\n        })\r\n        .catch((error) => console.log(\"error: \" + error));\r\n    });\r\n    setAllData(arrayBuilder);\r\n\r\n    setTimeout(function () {\r\n      setLoading(false);\r\n      // console.log(arrayBuilder);\r\n      if (arrayBuilder.length === 0 || arrayBuilder[0].Response === \"False\") {\r\n        setNoResults(\"no results found\");\r\n        setDataNum(\"0\");\r\n      } else {\r\n        setDataNum(arrayBuilder.length);\r\n      }\r\n    }, 2000);\r\n  };\r\n\r\n  // takes the date given by the API and creates mm/dd/yyyy\r\n  const convertDate = (date) => {\r\n    let dateArray = date.split(\" \");\r\n\r\n    let month = dateArray[1];\r\n    let day = dateArray[0];\r\n    let year = dateArray[2];\r\n\r\n    if (month === \"Jan\") {\r\n      month = \"1\";\r\n      return `${month}/${day}/${year}`;\r\n    } else if (month === \"Feb\") {\r\n      month = \"2\";\r\n      return `${month}/${day}/${year}`;\r\n    } else if (month === \"Mar\") {\r\n      month = \"3\";\r\n      return `${month}/${day}/${year}`;\r\n    } else if (month === \"Apr\") {\r\n      month = \"4\";\r\n      return `${month}/${day}/${year}`;\r\n    } else if (month === \"May\") {\r\n      month = \"5\";\r\n      return `${month}/${day}/${year}`;\r\n    } else if (month === \"Jun\") {\r\n      month = \"6\";\r\n      return `${month}/${day}/${year}`;\r\n    } else if (month === \"Jul\") {\r\n      month = \"7\";\r\n      return `${month}/${day}/${year}`;\r\n    } else if (month === \"Aug\") {\r\n      month = \"8\";\r\n      return `${month}/${day}/${year}`;\r\n    } else if (month === \"Sep\") {\r\n      month = \"9\";\r\n      return `${month}/${day}/${year}`;\r\n    } else if (month === \"Oct\") {\r\n      month = \"10\";\r\n      return `${month}/${day}/${year}`;\r\n    } else if (month === \"Nov\") {\r\n      month = \"11\";\r\n      return `${month}/${day}/${year}`;\r\n    } else if (month === \"Dec\") {\r\n      month = \"12\";\r\n      return `${month}/${day}/${year}`;\r\n    }\r\n  };\r\n\r\n  // This was for the bootstrap table\r\n  // const renderData = allData\r\n  //   ? allData.map((d, i) => {\r\n  //       console.log(d);\r\n  //       // This takes off the \"min\" off the end of the string. Requested formatting from Bob\r\n  //       const rtString = d.Runtime\r\n  //         ? d.Runtime.substring(0, d.Runtime.length - 3)\r\n  //         : null;\r\n  //       const date = d.Released ? convertDate(d.Released) : null;\r\n\r\n  //       return (\r\n  //         <tr key={i}>\r\n  //           <td>\r\n  //             <img src={d.Poster} alt=\"poster\" className=\"poster-img\" />\r\n  //           </td>\r\n  //           <td>{d.imdbID}</td>\r\n  //           <td>{d.Title}</td>\r\n  //           <td>{rtString}</td>\r\n  //           <td>{d.Year}</td>\r\n  //           <td>{d.Director}</td>\r\n  //           <td>{d.Writer}</td>\r\n  //           <td>{d.Actors}</td>\r\n  //           <td>{d.Genre}</td>\r\n  //           <td>{d.Language}</td>\r\n  //           <td>{d.Country}</td>\r\n  //           <td>{date}</td>\r\n  //           <td>{d.Poster}</td>\r\n  //         </tr>\r\n  //       );\r\n  //     })\r\n  //   : null;\r\n\r\n  // Material data table\r\n  const renderMaterialData = allData\r\n    ? allData.map((d, i) => {\r\n        // This takes off the \"min\" off the end of the string. Requested formatting from Bob\r\n        const rtString = d.Runtime\r\n          ? d.Runtime.substring(0, d.Runtime.length - 3)\r\n          : null;\r\n        const date = d.Released ? convertDate(d.Released) : null;\r\n\r\n        return {\r\n          posterImg: d.Poster,\r\n          imdbId: d.imdbID,\r\n          title: d.Title,\r\n          runtime: rtString,\r\n          releaseYear: d.Year,\r\n          director: d.Director,\r\n          writer: d.Writer,\r\n          actors: d.Actors,\r\n          genre: d.Genre,\r\n          language: d.Language,\r\n          country: d.Country,\r\n          releaseDate: date,\r\n          posterUrl: d.Poster,\r\n        };\r\n      })\r\n    : null;\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"form-wrapper\">\r\n        <form onSubmit={handleSubmit}>\r\n          <input type=\"text\" onChange={getInputValue} />\r\n          {respError ? (\r\n            <Alert variant=\"danger\" className=\"alerts\">\r\n              {respError}\r\n            </Alert>\r\n          ) : null}\r\n          <button type=\"submit\" className=\"submit-button\">\r\n            Search\r\n          </button>\r\n          <p>\r\n            You searched for <span className=\"data-num\">{dataNum}</span>\r\n            <span>&nbsp;{dataNum === 1 ? \"title\" : \"titles\"}</span>\r\n          </p>\r\n        </form>\r\n      </div>\r\n      {/* bootstrap table */}\r\n      {/* {loading ? (\r\n        <div className=\"spinner-wrapper\">\r\n          <Spinner animation=\"border\" role=\"status\">\r\n            <span className=\"visually-hidden\">Loading...</span>\r\n          </Spinner>\r\n        </div>\r\n      ) : (\r\n        <div className=\"table-container\">\r\n          <Table striped bordered hover size=\"sm\" responsive>\r\n            <thead>\r\n              <tr>\r\n                <th>Poster Img</th>\r\n                <th>IMDB ID</th>\r\n                <th>Title</th>\r\n                <th>Run time</th>\r\n                <th>Release year</th>\r\n                <th>Director</th>\r\n                <th>Writer</th>\r\n                <th>Actors</th>\r\n                <th>Genre</th>\r\n                <th>Language</th>\r\n                <th>Country of origin</th>\r\n                <th>Release date</th>\r\n                <th>Poster URL</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>{renderData}</tbody>\r\n          </Table>\r\n          {noResults ? (\r\n            <Alert variant=\"warning\" className=\"alerts\">\r\n              {noResults}\r\n            </Alert>\r\n          ) : null}\r\n        </div>\r\n      )} */}\r\n\r\n      {/* material table */}\r\n      {loading ? (\r\n        <div className=\"spinner-wrapper\">\r\n          <Spinner animation=\"border\" role=\"status\">\r\n            <span className=\"visually-hidden\">Loading...</span>\r\n          </Spinner>\r\n        </div>\r\n      ) : (\r\n        <div className=\"table-container\">\r\n          <MaterialTable\r\n            icons={tableIcons}\r\n            options={{\r\n              exportButton: true,\r\n              filtering: true,\r\n            }}\r\n            columns={[\r\n              {\r\n                title: \"Poster Img\",\r\n                field: \"posterImg\",\r\n                render: (rowData) => (\r\n                  <img\r\n                    src={rowData.posterImg}\r\n                    alt=\"poster\"\r\n                    style={{ width: 70 }}\r\n                  />\r\n                ),\r\n                filtering: false,\r\n                export: false,\r\n              },\r\n              {\r\n                title: \"IMDB ID\",\r\n                field: \"imdbId\",\r\n              },\r\n              { title: \"Title\", field: \"title\", type: \"string\" },\r\n              { title: \"Run time\", field: \"runtime\" },\r\n              { title: \"Release Year\", field: \"releaseYear\" },\r\n              { title: \"Director\", field: \"director\", type: \"string\" },\r\n              { title: \"Writer\", field: \"writer\", type: \"string\" },\r\n              { title: \"Actors\", field: \"actors\", type: \"string\" },\r\n              { title: \"Genre\", field: \"genre\", type: \"string\" },\r\n              { title: \"Language\", field: \"language\", type: \"string\" },\r\n              { title: \"Country of Origin\", field: \"country\", type: \"string\" },\r\n              { title: \"Release Date\", field: \"releaseDate\", type: \"date\" },\r\n              {\r\n                title: \"Poster URL\",\r\n                field: \"posterUrl\",\r\n                type: \"string\",\r\n                filtering: false,\r\n              },\r\n            ]}\r\n            data={renderMaterialData}\r\n            title=\"IMDB Search\"\r\n          />\r\n          {noResults ? (\r\n            <Alert variant=\"warning\" className=\"alerts\">\r\n              {noResults}\r\n            </Alert>\r\n          ) : null}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default OmdbApi;\r\n","// import { render } from \"@testing-library/react\";\r\nimport React from \"react\";\r\n\r\n// Styles\r\nimport \"./App.css\";\r\n\r\n// components\r\nimport OmdbApi from \"./components/omdb-api/OmdbApi\";\r\n// import ImdbApi from \"./components/imdb-api/ImdbApi\";\r\nimport Episodic from \"./components/eipsodic/Episodic\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <OmdbApi />\r\n      {/* <ImdbApi /> */}\r\n      {/* <Episodic /> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}