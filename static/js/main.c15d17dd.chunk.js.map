{"version":3,"sources":["components/omdb-api/OmdbApi.js","components/external-link-button/ExternalLinkButton.js","components/imdb-api/ImdbSingleSearch.js","App.js","reportWebVitals.js","index.js"],"names":["tableIcons","Add","forwardRef","props","ref","Check","Clear","Delete","DetailPanel","Edit","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","ThirdStateCheck","ViewColumn","OmdbApi","useState","inputVal","setInputVal","allData","setAllData","loading","setLoading","dataNum","setDataNum","respError","setRespError","noResults","setNoResults","handleErrors","response","Error","ok","statusText","loopIds","dArray","console","log","arrayBuilder","map","d","fetch","process","then","json","data","push","catch","error","setTimeout","length","Response","renderMaterialData","i","rtString","Runtime","substring","date","Released","dateArray","split","month","day","year","convertDate","posterImg","Poster","imdbId","imdbID","title","Title","runtime","releaseYear","Year","director","Director","writer","Writer","actors","Actors","genre","Genre","language","Language","country","Country","releaseDate","posterUrl","className","onSubmit","e","preventDefault","dataArray","type","onChange","target","value","placeholder","Alert","variant","size","icons","options","exportButton","exportAllData","columns","field","render","rowData","src","alt","style","width","filtering","export","cellStyle","backgroundColor","color","headerStyle","ExternalLinkButton","href","link","rel","icon","faExternalLinkAlt","ImdbSingleSearch","apiKey","requestOptions","method","redirect","search","setSearch","topLoading","setTopLoading","bottomLoading","seriesResult","setSeriesResult","mainDisp","setMainDisp","talentSectionShow","setTalentSectionShow","setImdbId","modalShow","setModalShow","seasonInfo","setSeasonInfo","thirdPartyShow","setThirdPartyShow","thirdPartyData","setThirdPartyData","handleSubmit","fullTitle","onClick","id","episodes","pathToEpisode","image","seasonNumber","episodeNumber","released","plot","originalTitle","class","tvSeriesInfo","yearEnd","contentRating","fetchThirdPartyData","runtimeMins","companies","seasons","totalSeasons","snumber","fetchSeasonInfo","countries","directorList","directors","pathToTalent","name","writerList","writers","stars","languages","genres","renderMainDisplay","entries","Object","filter","toLowerCase","includes","k","url","renderThirdPartyDisplay","actorList","talentInfo","asCharacter","TabPane","Tabs","App","defaultActiveKey","centered","tab","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c15d17dd.chunk.js","sourcesContent":["// import { render } from \"@testing-library/react\";\r\nimport React, { useState, forwardRef } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\n\r\n// antd imports\r\nimport { Table, Spin, Space } from \"antd\";\r\n\r\n// Bootstrap\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\n// Material Icons\r\nimport AddBox from \"@material-ui/icons/AddBox\";\r\nimport ArrowDownward from \"@material-ui/icons/ArrowDownward\";\r\nimport Check from \"@material-ui/icons/Check\";\r\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\r\nimport Clear from \"@material-ui/icons/Clear\";\r\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport FilterList from \"@material-ui/icons/FilterList\";\r\nimport FirstPage from \"@material-ui/icons/FirstPage\";\r\nimport LastPage from \"@material-ui/icons/LastPage\";\r\nimport Remove from \"@material-ui/icons/Remove\";\r\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\r\nimport Search from \"@material-ui/icons/Search\";\r\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\r\n\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => (\r\n    <ChevronRight {...props} ref={ref} />\r\n  )),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => (\r\n    <ChevronLeft {...props} ref={ref} />\r\n  )),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\r\n};\r\n\r\nfunction OmdbApi() {\r\n  const apiKey = process.env.REACT_APP_API_KEY;\r\n\r\n  const [inputVal, setInputVal] = useState(\"\");\r\n  const [allData, setAllData] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [dataNum, setDataNum] = useState(\"0\");\r\n  const [respError, setRespError] = useState(\"\");\r\n  const [noResults, setNoResults] = useState(\"\");\r\n  const [update, setUpdate] = useState(false);\r\n\r\n  const getInputValue = (e) => {\r\n    setInputVal(e.target.value);\r\n    // console.log(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    // Set these 2 to empty strings. If you don't, the errors will persist through the next search.\r\n    setNoResults(\"\");\r\n    setRespError(\"\");\r\n    console.log(\"handlesubmit\");\r\n    const dataArray = inputVal.split(\" \");\r\n    loopIds(dataArray);\r\n  };\r\n\r\n  function handleErrors(response) {\r\n    setRespError(response.Error);\r\n    if (response.Error) throw Error(response.Error);\r\n    if (!response.ok) throw Error(response.statusText);\r\n    return response;\r\n  }\r\n\r\n  // This function takes the array of IDs, loops through and makes an API call for each iteration then stores it in an array. That new array will be set to the\r\n  // state object which we will use to iterate over to display the data to the user.\r\n  const loopIds = (dArray) => {\r\n    console.log(\"in loopIDs\");\r\n    setLoading(true);\r\n    let arrayBuilder = [];\r\n    dArray.map((d) => {\r\n      // console.log(d);\r\n      return fetch(`https://www.omdbapi.com/?i=${d}&apikey=${apiKey}`)\r\n        .then(handleErrors)\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          arrayBuilder.push(data);\r\n        })\r\n        .catch((error) => console.log(\"error: \" + error));\r\n    });\r\n    setAllData(arrayBuilder);\r\n\r\n    setTimeout(function () {\r\n      setLoading(false);\r\n      if (arrayBuilder.length === 0 || arrayBuilder[0].Response === \"False\") {\r\n        setNoResults(\"no results found\");\r\n        setDataNum(\"0\");\r\n      } else {\r\n        setDataNum(arrayBuilder.length);\r\n      }\r\n    }, 3000);\r\n  };\r\n\r\n  // const setAllTheData = (arr) => {\r\n  //   setLoading(false);\r\n  //   setAllData(arr);\r\n  //   console.log(\"set all the data\");\r\n  //   if (arr.length === 0 || arr[0].Response === \"False\") {\r\n  //     setNoResults(\"no results found\");\r\n  //     setDataNum(\"0\");\r\n  //   } else {\r\n  //     setDataNum(arr.length);\r\n  //   }\r\n  // };\r\n\r\n  // takes the date given by the API and creates mm/dd/yyyy\r\n  const convertDate = (date) => {\r\n    let dateArray = date.split(\" \");\r\n\r\n    let month = dateArray[1];\r\n    let day = dateArray[0];\r\n    let year = dateArray[2];\r\n\r\n    if (month === \"Jan\") {\r\n      month = \"1\";\r\n      return `${month}/${day}/${year}`;\r\n    } else if (month === \"Feb\") {\r\n      month = \"2\";\r\n      return `${month}/${day}/${year}`;\r\n    } else if (month === \"Mar\") {\r\n      month = \"3\";\r\n      return `${month}/${day}/${year}`;\r\n    } else if (month === \"Apr\") {\r\n      month = \"4\";\r\n      return `${month}/${day}/${year}`;\r\n    } else if (month === \"May\") {\r\n      month = \"5\";\r\n      return `${month}/${day}/${year}`;\r\n    } else if (month === \"Jun\") {\r\n      month = \"6\";\r\n      return `${month}/${day}/${year}`;\r\n    } else if (month === \"Jul\") {\r\n      month = \"7\";\r\n      return `${month}/${day}/${year}`;\r\n    } else if (month === \"Aug\") {\r\n      month = \"8\";\r\n      return `${month}/${day}/${year}`;\r\n    } else if (month === \"Sep\") {\r\n      month = \"9\";\r\n      return `${month}/${day}/${year}`;\r\n    } else if (month === \"Oct\") {\r\n      month = \"10\";\r\n      return `${month}/${day}/${year}`;\r\n    } else if (month === \"Nov\") {\r\n      month = \"11\";\r\n      return `${month}/${day}/${year}`;\r\n    } else if (month === \"Dec\") {\r\n      month = \"12\";\r\n      return `${month}/${day}/${year}`;\r\n    }\r\n  };\r\n\r\n  // Material data table\r\n  const renderMaterialData = allData\r\n    ? allData.map((d, i) => {\r\n        // This takes off the \"min\" off the end of the string. Requested formatting from Bob\r\n        const rtString = d.Runtime\r\n          ? d.Runtime.substring(0, d.Runtime.length - 3)\r\n          : null;\r\n        const date = d.Released ? convertDate(d.Released) : null;\r\n\r\n        return {\r\n          posterImg: d.Poster,\r\n          imdbId: d.imdbID,\r\n          title: d.Title,\r\n          runtime: rtString,\r\n          releaseYear: d.Year,\r\n          director: d.Director,\r\n          writer: d.Writer,\r\n          actors: d.Actors,\r\n          genre: d.Genre,\r\n          language: d.Language,\r\n          country: d.Country,\r\n          releaseDate: date,\r\n          posterUrl: d.Poster,\r\n        };\r\n      })\r\n    : null;\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"form-wrapper\">\r\n        <form onSubmit={handleSubmit}>\r\n          <input type=\"text\" onChange={getInputValue} className=\"input-bar\" placeholder=\"Paste values with a space between\" />\r\n          {respError ? (\r\n            <Alert variant=\"danger\" className=\"alerts\">\r\n              {respError}\r\n            </Alert>\r\n          ) : null}\r\n          <button type=\"submit\" className=\"submit-button\">\r\n            Search\r\n          </button>\r\n          <p className=\"search-amount\">\r\n            You searched for <span className=\"data-num\">{dataNum}</span>\r\n            <span>&nbsp;{dataNum === 1 ? \"title\" : \"titles\"}</span>\r\n          </p>\r\n        </form>\r\n      </div>\r\n\r\n      {/* material table */}\r\n      {loading ? (\r\n        <div className=\"spinner-wrapper\">\r\n          <Space size=\"middle\">\r\n            <Spin size=\"large\" />\r\n          </Space>\r\n        </div>\r\n      ) : (\r\n        <div className=\"table-container\">\r\n          <MaterialTable\r\n            icons={tableIcons}\r\n            options={{\r\n              exportButton: true,\r\n              exportAllData: true,\r\n            }}\r\n            columns={[\r\n              {\r\n                title: \"Poster Img\",\r\n                field: \"posterImg\",\r\n                render: (rowData) => (\r\n                  <img\r\n                    src={rowData.posterImg}\r\n                    alt=\"poster\"\r\n                    style={{ width: 70 }}\r\n                  />\r\n                ),\r\n                filtering: false,\r\n                export: false,\r\n                cellStyle: {\r\n                  backgroundColor: \"#393E46\",\r\n                  color: \"#FFF\",\r\n                },\r\n                headerStyle: {\r\n                  backgroundColor: \"#393E46\",\r\n                  color: \"#FFF\",\r\n                },\r\n              },\r\n              {\r\n                title: \"IMDB ID\",\r\n                field: \"imdbId\",\r\n                cellStyle: {\r\n                  backgroundColor: \"#393E46\",\r\n                  color: \"#FFF\",\r\n                },\r\n                headerStyle: {\r\n                  backgroundColor: \"#393E46\",\r\n                  color: \"#FFF\",\r\n                },\r\n              },\r\n              {\r\n                title: \"Title\",\r\n                field: \"title\",\r\n                type: \"string\",\r\n                cellStyle: {\r\n                  backgroundColor: \"#393E46\",\r\n                  color: \"#FFF\",\r\n                },\r\n                headerStyle: {\r\n                  backgroundColor: \"#393E46\",\r\n                  color: \"#FFF\",\r\n                },\r\n              },\r\n              {\r\n                title: \"Run time\",\r\n                field: \"runtime\",\r\n                cellStyle: {\r\n                  backgroundColor: \"#393E46\",\r\n                  color: \"#FFF\",\r\n                },\r\n                headerStyle: {\r\n                  backgroundColor: \"#393E46\",\r\n                  color: \"#FFF\",\r\n                },\r\n              },\r\n              {\r\n                title: \"Release Year\",\r\n                field: \"releaseYear\",\r\n                cellStyle: {\r\n                  backgroundColor: \"#393E46\",\r\n                  color: \"#FFF\",\r\n                },\r\n                headerStyle: {\r\n                  backgroundColor: \"#393E46\",\r\n                  color: \"#FFF\",\r\n                },\r\n              },\r\n              {\r\n                title: \"Director\",\r\n                field: \"director\",\r\n                type: \"string\",\r\n                cellStyle: {\r\n                  backgroundColor: \"#393E46\",\r\n                  color: \"#FFF\",\r\n                },\r\n                headerStyle: {\r\n                  backgroundColor: \"#393E46\",\r\n                  color: \"#FFF\",\r\n                },\r\n              },\r\n              {\r\n                title: \"Writer\",\r\n                field: \"writer\",\r\n                type: \"string\",\r\n                cellStyle: {\r\n                  backgroundColor: \"#393E46\",\r\n                  color: \"#FFF\",\r\n                },\r\n                headerStyle: {\r\n                  backgroundColor: \"#393E46\",\r\n                  color: \"#FFF\",\r\n                },\r\n              },\r\n              {\r\n                title: \"Actors\",\r\n                field: \"actors\",\r\n                type: \"string\",\r\n                cellStyle: {\r\n                  backgroundColor: \"#393E46\",\r\n                  color: \"#FFF\",\r\n                },\r\n                headerStyle: {\r\n                  backgroundColor: \"#393E46\",\r\n                  color: \"#FFF\",\r\n                },\r\n              },\r\n              {\r\n                title: \"Genre\",\r\n                field: \"genre\",\r\n                type: \"string\",\r\n                cellStyle: {\r\n                  backgroundColor: \"#393E46\",\r\n                  color: \"#FFF\",\r\n                },\r\n                headerStyle: {\r\n                  backgroundColor: \"#393E46\",\r\n                  color: \"#FFF\",\r\n                },\r\n              },\r\n              {\r\n                title: \"Language\",\r\n                field: \"language\",\r\n                type: \"string\",\r\n                cellStyle: {\r\n                  backgroundColor: \"#393E46\",\r\n                  color: \"#FFF\",\r\n                },\r\n                headerStyle: {\r\n                  backgroundColor: \"#393E46\",\r\n                  color: \"#FFF\",\r\n                },\r\n              },\r\n              {\r\n                title: \"Country of Origin\",\r\n                field: \"country\",\r\n                type: \"string\",\r\n                cellStyle: {\r\n                  backgroundColor: \"#393E46\",\r\n                  color: \"#FFF\",\r\n                },\r\n                headerStyle: {\r\n                  backgroundColor: \"#393E46\",\r\n                  color: \"#FFF\",\r\n                },\r\n              },\r\n              {\r\n                title: \"Release Date\",\r\n                field: \"releaseDate\",\r\n                type: \"date\",\r\n                cellStyle: {\r\n                  backgroundColor: \"#393E46\",\r\n                  color: \"#FFF\",\r\n                },\r\n                headerStyle: {\r\n                  backgroundColor: \"#393E46\",\r\n                  color: \"#FFF\",\r\n                },\r\n              },\r\n              {\r\n                title: \"Poster URL\",\r\n                field: \"posterUrl\",\r\n                type: \"string\",\r\n                filtering: false,\r\n                cellStyle: {\r\n                  backgroundColor: \"#393E46\",\r\n                  color: \"#FFF\",\r\n                },\r\n                headerStyle: {\r\n                  backgroundColor: \"#393E46\",\r\n                  color: \"#FFF\",\r\n                },\r\n              },\r\n            ]}\r\n            data={renderMaterialData}\r\n            title=\"IMDB Search\"\r\n          />\r\n          {noResults ? (\r\n            <Alert variant=\"warning\" className=\"alerts\">\r\n              {noResults}\r\n            </Alert>\r\n          ) : null}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default OmdbApi;\r\n","import React from \"react\";\r\n\r\n//css\r\nimport \"./ExternalLinkButton.css\";\r\n\r\n// FA icon\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faExternalLinkAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst ExternalLinkButton = (props) => {\r\n  return (\r\n    <>\r\n      <a\r\n        href={props.link}\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n        className=\"link-button-wrapper\"\r\n      >\r\n        <FontAwesomeIcon icon={faExternalLinkAlt} />\r\n      </a>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ExternalLinkButton;\r\n","// import { render } from \"@testing-library/react\";\r\nimport React, { useState, forwardRef, useEffect } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { Table, Spin, Tag, Space } from \"antd\";\r\nimport { Menu, Dropdown } from \"antd\";\r\nimport { DownOutlined } from \"@ant-design/icons\";\r\n\r\n// components\r\nimport LinkButton from \"../external-link-button/ExternalLinkButton\";\r\nimport TalentCard from \"./TalentCard\";\r\n\r\n// css\r\nimport \"../episodic-omdb/EpisodicOmdb.css\";\r\n\r\n// Bootstrap\r\n// import Table from \"react-bootstrap/Table\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\n// Material Icons\r\nimport AddBox from \"@material-ui/icons/AddBox\";\r\nimport ArrowDownward from \"@material-ui/icons/ArrowDownward\";\r\nimport Check from \"@material-ui/icons/Check\";\r\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\r\nimport Clear from \"@material-ui/icons/Clear\";\r\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport FilterList from \"@material-ui/icons/FilterList\";\r\nimport FirstPage from \"@material-ui/icons/FirstPage\";\r\nimport LastPage from \"@material-ui/icons/LastPage\";\r\nimport Remove from \"@material-ui/icons/Remove\";\r\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\r\nimport Search from \"@material-ui/icons/Search\";\r\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\r\nimport { FlashOffRounded } from \"@material-ui/icons\";\r\nimport Item from \"antd/lib/list/Item\";\r\n\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => (\r\n    <ChevronRight {...props} ref={ref} />\r\n  )),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => (\r\n    <ChevronLeft {...props} ref={ref} />\r\n  )),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\r\n};\r\n\r\nconst ImdbSingleSearch = () => {\r\n  const apiKey = process.env.REACT_APP_IMDB_KEY;\r\n\r\n  // request ops for IMDB API\r\n  const requestOptions = {\r\n    method: \"GET\",\r\n    redirect: \"follow\",\r\n  };\r\n\r\n  const [inputVal, setInputVal] = useState(\"\");\r\n  const [search, setSearch] = useState(\"\");\r\n  const [topLoading, setTopLoading] = useState(false);\r\n  const [bottomLoading, setBottomLoading] = useState(false);\r\n  const [respError, setRespError] = useState(\"\");\r\n  const [noResults, setNoResults] = useState(\"\");\r\n  const [seriesResult, setSeriesResult] = useState([]);\r\n  const [mainDisp, setMainDisp] = useState(false);\r\n  const [talentSectionShow, setTalentSectionShow] = useState(false);\r\n  const [imdbId, setImdbId] = useState(\"\");\r\n  const [modalShow, setModalShow] = useState(false);\r\n  const [seasonInfo, setSeasonInfo] = useState([]);\r\n  const [thirdPartyShow, setThirdPartyShow] = useState(false);\r\n  const [thirdPartyData, setThirdPartyData] = useState([]);\r\n\r\n  const getInputValue = (e) => {\r\n    setInputVal(e.target.value);\r\n  };\r\n\r\n  // This submit handle the top most (and first) search with the IMDB ID\r\n  const handleSubmit = (e) => {\r\n    setTopLoading(true);\r\n    console.log(inputVal);\r\n    e.preventDefault();\r\n    // Set these 2 to emptry strings. If you don't, the errors will persist through the next search.\r\n    setNoResults(\"\");\r\n    setRespError(\"\");\r\n    fetch(\r\n      `https://imdb-api.com/en/API/Title/${apiKey}/${inputVal}`,\r\n      requestOptions\r\n    )\r\n      .then(handleErrors)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log(data);\r\n        setSeriesResult(data);\r\n        setImdbId(data.imdbID);\r\n        setTopLoading(false);\r\n        setMainDisp(true);\r\n        setTalentSectionShow(true);\r\n        setThirdPartyData([]);\r\n        setThirdPartyShow(false);\r\n      })\r\n      .catch((error) => console.log(\"error\", error));\r\n  };\r\n\r\n  // This function will fetch the season information when the user clicks on the season number on the season dropdown.\r\n  // It's then used to generate the info used in the modal pop up\r\n  const fetchSeasonInfo = (e, id, snumber) => {\r\n    e.preventDefault();\r\n    fetch(\r\n      `https://imdb-api.com/en/API/SeasonEpisodes/${apiKey}/${id}/${snumber}`,\r\n      requestOptions\r\n    )\r\n      .then(handleErrors)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log(data);\r\n        setSeasonInfo(data);\r\n      })\r\n      .catch((error) => console.log(\"error\", error));\r\n  };\r\n\r\n  // This function fetched the third party links we can use to search additional sites with.\r\n  const fetchThirdPartyData = (e, id) => {\r\n    e.preventDefault();\r\n    fetch(\r\n      `https://imdb-api.com/en/API/ExternalSites/${apiKey}/${id}`,\r\n      requestOptions\r\n    )\r\n      .then(handleErrors)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log(data);\r\n        setThirdPartyData(data);\r\n      })\r\n      .catch((error) => console.log(\"error\", error));\r\n  };\r\n\r\n  // error handling.\r\n  function handleErrors(response) {\r\n    setRespError(response.Error);\r\n    if (response.Error) throw Error(response.Error);\r\n    if (!response.ok) throw Error(response.statusText);\r\n    return response;\r\n  }\r\n\r\n  // This renders the main display after the user searches with the IMDB ID.\r\n  const renderMainDisplay = () => {\r\n    if (seriesResult) {\r\n      // Render the directors with the array the API gives us so we can have a direct link to the corresponding IMDB page.\r\n      const renderDirectors = () => {\r\n        if (seriesResult) {\r\n          let directorListArray = seriesResult.directorList;\r\n          let directorList = directorListArray.map(function (directors) {\r\n            const pathToTalent = `https://www.imdb.com/name/${directors.id}/?ref_=ttfc_fc_cl_t1`;\r\n            return (\r\n              <>\r\n                <a\r\n                  href={pathToTalent}\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                >\r\n                  {directors.name}\r\n                </a>\r\n                &nbsp;\r\n              </>\r\n            );\r\n          });\r\n          return directorList;\r\n        } else return;\r\n      };\r\n\r\n      // Render the writers with the array the API gives us so we can have a direct link to the corresponding IMDB page.\r\n      const renderWriters = () => {\r\n        if (seriesResult) {\r\n          let writersListArray = seriesResult.writerList;\r\n          let writerList = writersListArray.map(function (writers) {\r\n            const pathToTalent = `https://www.imdb.com/name/${writers.id}/?ref_=ttfc_fc_cl_t1`;\r\n            return (\r\n              <>\r\n                <a\r\n                  href={pathToTalent}\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                >\r\n                  {writers.name}\r\n                </a>\r\n                &nbsp;\r\n              </>\r\n            );\r\n          });\r\n          return writerList;\r\n        } else return;\r\n      };\r\n\r\n      // Map through the season array the API gives us to display the season dropdown the user will use to search the seasons.\r\n      const renderSeasonDropdownItems = () => {\r\n        if (seriesResult) {\r\n          let seriesResultArray = seriesResult.tvSeriesInfo.seasons;\r\n          let seriesResults = seriesResultArray.map(function (seasons) {\r\n            return (\r\n              <span\r\n                onClick={(e) => {\r\n                  fetchSeasonInfo(e, seriesResult.id, seasons);\r\n                  setModalShow(true);\r\n                }}\r\n                className=\"dropdown-item\"\r\n              >\r\n                {seasons}\r\n              </span>\r\n            );\r\n          });\r\n          return seriesResults;\r\n        } else return;\r\n      };\r\n      return (\r\n        <div className=\"main-display-wrapper\">\r\n          <img src={seriesResult.image} alt=\"\" className=\"ep-md-img\" />\r\n          <div className=\"content\">\r\n            <div className=\"content-header\">\r\n              <h2 className=\"title\">\r\n                <span className=\"title-name\">{seriesResult.title}</span>{\" \"}\r\n                <span className=\"title-date\">({seriesResult.year})</span>\r\n              </h2>\r\n              {seriesResult.originalTitle !== \"\" ? (\r\n                <p class=\"original-title\">\r\n                  Original Title: {seriesResult.originalTitle}\r\n                </p>\r\n              ) : null}\r\n              {/* <p class=\"original-title\">\r\n                Original Title: this is original title\r\n              </p> */}\r\n              <LinkButton\r\n                link={`https://www.imdb.com/title/${seriesResult.id}/`}\r\n              />\r\n            </div>\r\n            <div className=\"under-title-grid\">\r\n              <span>\r\n                <i>{seriesResult.type}</i>\r\n              </span>\r\n              <span className=\"dot-separator\">•</span>\r\n              <span>\r\n                {seriesResult.tvSeriesInfo !== null ? (\r\n                  <i>\r\n                    {seriesResult.year} - {seriesResult.tvSeriesInfo.yearEnd}\r\n                  </i>\r\n                ) : (\r\n                  <i>{seriesResult.year}</i>\r\n                )}\r\n              </span>\r\n              <span className=\"dot-separator\">•</span>\r\n              <span>\r\n                <i>{seriesResult.contentRating}</i>\r\n              </span>\r\n              <span className=\"dot-separator\">•</span>\r\n              <span\r\n                onClick={(e) => {\r\n                  setThirdPartyShow(true);\r\n                  fetchThirdPartyData(e, seriesResult.id);\r\n                }}\r\n                className=\"external-links\"\r\n              >\r\n                <i>Click to view external website links</i>\r\n              </span>\r\n            </div>\r\n            <div className=\"content-inner\">\r\n              <div className=\"info-content\">\r\n                <table className=\"main-body-table\">\r\n                  <tbody>\r\n                    <tr>\r\n                      <td style={{ width: \"30%\" }}>\r\n                        <span className=\"title-first\">\r\n                          <b>Release date</b>\r\n                        </span>\r\n                      </td>\r\n                      <td>\r\n                        <span className=\"margin-right\">\r\n                          {seriesResult.releaseDate}\r\n                        </span>\r\n                        <LinkButton\r\n                          link={`https://www.imdb.com/title/${seriesResult.id}/releaseinfo?ref_=tt_dt_rdat`}\r\n                        />\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>\r\n                        <span className=\"title-first\">\r\n                          <b>Release year</b>\r\n                        </span>\r\n                      </td>\r\n                      <td>{seriesResult.year}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>\r\n                        <span className=\"title-first\">\r\n                          <b>Runtime</b>\r\n                        </span>\r\n                      </td>\r\n                      <td>\r\n                        {seriesResult.runtimeMins}\r\n                        <LinkButton\r\n                          link={`https://www.imdb.com/title/${seriesResult.id}/technical?ref_=tt_spec_sm`}\r\n                        />\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>\r\n                        <span className=\"title-first\">\r\n                          <b>Company Credits</b>\r\n                        </span>\r\n                      </td>\r\n                      <td>\r\n                        <LinkButton\r\n                          link={`https://www.imdb.com/title/${seriesResult.id}/companycredits?ref_=tt_dt_co`}\r\n                        />\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>\r\n                        <span className=\"title-first\">\r\n                          <b>Companies</b>\r\n                        </span>\r\n                      </td>\r\n                      <td>{seriesResult.companies}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>\r\n                        <span className=\"title-first\">\r\n                          <b>Cast & Crew</b>\r\n                        </span>\r\n                      </td>\r\n                      <td>\r\n                        <LinkButton\r\n                          link={`https://www.imdb.com/title/${seriesResult.id}/fullcredits/?ref_=tt_ql_cl`}\r\n                        />\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>\r\n                        <span className=\"title-first\">\r\n                          <b>Technical Specs</b>\r\n                        </span>\r\n                      </td>\r\n                      <td>\r\n                        <LinkButton\r\n                          link={`https://www.imdb.com/title/${seriesResult.id}/technical?ref_=ttloc_ql_6`}\r\n                        />\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>\r\n                        <span className=\"title-first\">\r\n                          <b>Filming & Production</b>\r\n                        </span>\r\n                      </td>\r\n                      <td>\r\n                        <LinkButton\r\n                          link={`https://www.imdb.com/title/${seriesResult.id}/locations?ref_=ttspec_ql_5`}\r\n                        />\r\n                      </td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n                {seriesResult.seasons ? (\r\n                  <p>\r\n                    <span className=\"title-first\">\r\n                      <b>Seasons</b>:&nbsp;\r\n                    </span>{\" \"}\r\n                    {seriesResult.totalSeasons}\r\n                    <LinkButton\r\n                      link={`https://www.imdb.com/title/${seriesResult.id}/episodes/?ref_=tt_ov_epl`}\r\n                    />\r\n                  </p>\r\n                ) : null}\r\n                {seriesResult.tvSeriesInfo !== null ? (\r\n                  <div className=\"dropdown\">\r\n                    <button className=\"dropbtn\">Seasons</button>\r\n                    <div className=\"dropdown-content\">\r\n                      {renderSeasonDropdownItems()}\r\n                    </div>\r\n                  </div>\r\n                ) : null}\r\n                {seriesResult.tvSeriesInfo !== null ? (\r\n                  <button\r\n                    className=\"prev-season-btn\"\r\n                    onClick={() => setModalShow(true)}\r\n                  >\r\n                    open previous season\r\n                  </button>\r\n                ) : null}\r\n              </div>\r\n\r\n              <div className=\"info-content\">\r\n                <table className=\"main-body-table\">\r\n                  <tbody>\r\n                    <tr>\r\n                      <td style={{ width: \"20%\" }}>\r\n                        <span className=\"title-first\">\r\n                          <b>IMDB ID</b>\r\n                        </span>\r\n                      </td>\r\n                      <td>\r\n                        <span>{seriesResult.id}</span>\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>\r\n                        <span className=\"title-first\">\r\n                          <b>Countries</b>\r\n                        </span>\r\n                      </td>\r\n                      <td>{seriesResult.countries}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>\r\n                        <span className=\"title-first\">\r\n                          <b>Directors</b>\r\n                        </span>\r\n                      </td>\r\n                      <td>{renderDirectors()}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>\r\n                        <span className=\"title-first\">\r\n                          <b>Writers</b>\r\n                        </span>\r\n                      </td>\r\n                      <td>{renderWriters()}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>\r\n                        <span className=\"title-first\">\r\n                          <b>Actors</b>\r\n                        </span>\r\n                      </td>\r\n                      <td>{seriesResult.stars}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>\r\n                        <span className=\"title-first\">\r\n                          <b>Language</b>\r\n                        </span>\r\n                      </td>\r\n                      <td>{seriesResult.languages}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>\r\n                        <span className=\"title-first\">\r\n                          <b>Genre</b>\r\n                        </span>\r\n                      </td>\r\n                      <td>{seriesResult.genres}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>\r\n                        <span className=\"title-first\">\r\n                          <b>Synopsis</b>\r\n                        </span>\r\n                      </td>\r\n                      <td>{seriesResult.plot}</td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    } else if (seriesResult.length <= 0) {\r\n      return <div>NOTHING</div>;\r\n    }\r\n  };\r\n\r\n  const renderThirdPartyDisplay = () => {\r\n    if (thirdPartyData && thirdPartyData.fullTitle) {\r\n      let entries = Object.entries(thirdPartyData);\r\n      console.log(entries);\r\n      let data = entries\r\n        .filter((name) => {\r\n          return search.toLowerCase() === \"\"\r\n            ? name[0]\r\n            : name[0].toLowerCase().includes(search);\r\n        })\r\n        .map(([k, value]) => {\r\n          if (\r\n            typeof value === \"object\" &&\r\n            value !== null &&\r\n            k !== \"wikipediaUrls\"\r\n          ) {\r\n            //   console.log(`${key}: ${value.url}`);\r\n            return (\r\n              <tr id=\"external-site-table-tr\">\r\n                <td>{k}</td>\r\n                <td className=\"primary-photo\">\r\n                  <a href={value.url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                    {value.url}\r\n                  </a>\r\n                </td>\r\n              </tr>\r\n            );\r\n          } else {\r\n            console.log(value);\r\n          }\r\n        });\r\n      return data;\r\n    } else return;\r\n  };\r\n\r\n  const renderTalentDisplay = () => {\r\n    if (seriesResult) {\r\n      let talentArray = seriesResult.actorList;\r\n      let cardReturn = talentArray.map(function (talentInfo) {\r\n        const pathToTalent = `https://www.imdb.com/name/${talentInfo.id}/?ref_=ttfc_fc_cl_t1`;\r\n        return (\r\n          <tr id=\"talent-table-tr\">\r\n            <td className=\"primary-photo\">\r\n              <img\r\n                src={talentInfo.image}\r\n                alt={talentInfo.name}\r\n                className=\"talent-table-img\"\r\n              />\r\n            </td>\r\n            <td>\r\n              <a href={pathToTalent} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                {talentInfo.name}\r\n              </a>\r\n            </td>\r\n            <td>\r\n              <span>{talentInfo.asCharacter}</span>\r\n            </td>\r\n            <td>{talentInfo.id}</td>\r\n          </tr>\r\n        );\r\n      });\r\n      return cardReturn;\r\n    } else if (seriesResult.length <= 0) {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const renderCustomModal = () => {\r\n    if (seasonInfo && seasonInfo.episodes) {\r\n      let seasonArray = seasonInfo.episodes;\r\n      let seasonsData = seasonArray.map(function (seasonInfo) {\r\n        const pathToEpisode = `https://www.imdb.com/title/${seasonInfo.id}/`;\r\n        return (\r\n          <tr id=\"talent-table-tr\">\r\n            <td>\r\n              {\" \"}\r\n              <img\r\n                src={seasonInfo.image}\r\n                alt={seasonInfo.title}\r\n                className=\"season-table-img\"\r\n              />\r\n            </td>\r\n            <td>{seasonInfo.seasonNumber}</td>\r\n            <td>{seasonInfo.episodeNumber}</td>\r\n            <td>{seasonInfo.year}</td>\r\n            <td>{seasonInfo.title}</td>\r\n            <td>{seasonInfo.released}</td>\r\n            <td>{seasonInfo.plot}</td>\r\n            <td>\r\n              <a href={pathToEpisode} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                {seasonInfo.id}\r\n              </a>\r\n            </td>\r\n          </tr>\r\n        );\r\n      });\r\n      return seasonsData;\r\n    } else return null;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"form-wrapper\">\r\n        <form onSubmit={handleSubmit}>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Paste IMDB ID\"\r\n            onChange={getInputValue}\r\n            className=\"input-bar\"\r\n          />\r\n          {respError ? (\r\n            <Alert variant=\"danger\" className=\"alerts\">\r\n              {respError}\r\n            </Alert>\r\n          ) : null}\r\n          <button type=\"submit\" className=\"submit-button\">\r\n            Search\r\n          </button>\r\n        </form>\r\n      </div>\r\n      <div className={modalShow ? \"modal-content-show\" : \"modal-content-hide\"}>\r\n        <div className=\"modal-wrapper\">\r\n          <div className=\"modal-header\">\r\n            <h2 className=\"fw-4\">{seasonInfo.fullTitle}</h2>\r\n            <span className=\"close\" onClick={() => setModalShow(false)}>\r\n              &times;\r\n            </span>\r\n          </div>\r\n          <div className=\"custom-modal-body\">\r\n            <table className=\"season-table\">\r\n              <tbody>\r\n                <tr id=\"talent-table-tr\">\r\n                  <th>Image</th>\r\n                  <th>Season</th>\r\n                  <th>Episode</th>\r\n                  <th>Year</th>\r\n                  <th>Title</th>\r\n                  <th>Released</th>\r\n                  <th>Plot</th>\r\n                  <th>ID</th>\r\n                </tr>\r\n                {renderCustomModal()}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n          <div className=\"custom-modal-footer\">\r\n            <button onClick={() => setModalShow(false)}>Close</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {topLoading ? (\r\n        <div className=\"spinner-wrapper\">\r\n          <Space size=\"middle\">\r\n            <Spin size=\"large\" />\r\n          </Space>\r\n        </div>\r\n      ) : null}\r\n      {mainDisp ? (\r\n        <div className=\"md-border-padding\">{renderMainDisplay()}</div>\r\n      ) : null}\r\n      {thirdPartyShow ? (\r\n        <div className=\"md-border-padding\">\r\n          <h2 className=\"main-title-header\">- External Sites -</h2>\r\n          <form onSubmit={handleSubmit} className=\"third-party-search-form\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Type here to search ...\"\r\n              onChange={(e) => setSearch(e.target.value)}\r\n              className=\"input-bar\"\r\n            />\r\n          </form>\r\n          <table className=\"season-table\">\r\n            <tbody>\r\n              <tr id=\"talent-table-tr\">\r\n                <th className=\"table-header-30\">Website</th>\r\n                <th>Link</th>\r\n              </tr>\r\n              {renderThirdPartyDisplay()}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      ) : null}\r\n      {talentSectionShow ? (\r\n        <div className=\"md-border-padding talent-section-grid\">\r\n          <h2 className=\"main-title-header\">- Series Cast -</h2>\r\n          <table className=\"talent-table\">\r\n            <tbody>{renderTalentDisplay()}</tbody>\r\n          </table>\r\n        </div>\r\n      ) : null}\r\n      {bottomLoading ? (\r\n        <div className=\"spinner-wrapper\">\r\n          <Space size=\"middle\">\r\n            <Spin size=\"large\" />\r\n          </Space>\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImdbSingleSearch;\r\n","// import { render } from \"@testing-library/react\";\r\nimport React from \"react\";\r\nimport { Tabs } from \"antd\";\r\n\r\n// Styles\r\nimport \"antd/dist/antd.css\";\r\nimport \"./App.css\";\r\n\r\n// components\r\nimport OmdbApi from \"./components/omdb-api/OmdbApi\";\r\n// import ImdbApi from \"./components/imdb-api/ImdbApi\";\r\n// import Episodic from \"./components/eipsodic/Episodic\";\r\n// import EpisodicOmdb from \"./components/episodic-omdb/EpisodicOmdb\";\r\n// import TestEp from \"./components/episodic-omdb/TestEp\";\r\nimport ImdbSingleSearch from \"./components/imdb-api/ImdbSingleSearch\";\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <div class=\"main-content-wrapper\">\r\n        <Tabs defaultActiveKey=\"1\" centered>\r\n          <TabPane tab=\"Title Search\" key=\"1\">\r\n            <ImdbSingleSearch />\r\n          </TabPane>\r\n          <TabPane tab=\"Bulk Search\" key=\"2\">\r\n            <OmdbApi />\r\n          </TabPane>\r\n          {/* <TabPane tab=\"IMDB-API\" key=\"3\">\r\n          <ImdbApi />\r\n        </TabPane> */}\r\n          {/* <TabPane tab=\"Test Ep\" key=\"3\">\r\n            <TestEp />\r\n          </TabPane>\r\n          <TabPane tab=\"Series\" key=\"4\">\r\n            <Episodic />\r\n          </TabPane>\r\n          <TabPane tab=\"IMDB Single\" key=\"5\">\r\n            <ImdbSingleSearch />\r\n          </TabPane> */}\r\n        </Tabs>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}