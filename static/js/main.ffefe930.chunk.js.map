{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","inputVal","setInputVal","allData","setAllData","loading","setLoading","dataNum","setDataNum","respError","setRespError","noResults","setNoResults","handleErrors","response","Error","ok","statusText","loopIds","dArray","arrayBuilder","map","d","fetch","process","then","json","data","push","catch","error","console","log","setTimeout","length","Response","renderData","i","rtString","Runtime","substring","date","Released","dateArray","split","month","day","year","convertDate","imdbID","Title","Year","Director","Actors","Poster","Language","Country","className","onSubmit","e","preventDefault","dataArray","type","onChange","target","value","Alert","variant","Spinner","animation","role","Table","striped","bordered","hover","size","responsive","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ffefe930.chunk.js","sourcesContent":["// import { render } from \"@testing-library/react\";\r\nimport React, { useState } from \"react\";\r\n\r\n// Bootstrap\r\nimport Table from \"react-bootstrap/Table\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\n// Styles\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const apiKey = process.env.REACT_APP_API_KEY;\r\n\r\n  const [inputVal, setInputVal] = useState(\"\");\r\n  const [allData, setAllData] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [dataNum, setDataNum] = useState(\"0\");\r\n  const [respError, setRespError] = useState(\"\");\r\n  const [noResults, setNoResults] = useState(\"\");\r\n\r\n  const getInputValue = (e) => {\r\n    setInputVal(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    setNoResults(\"\");\r\n    setRespError(\"\");\r\n    const dataArray = inputVal.split(\";\");\r\n    loopIds(dataArray);\r\n  };\r\n\r\n  function handleErrors(response) {\r\n    setRespError(response.Error);\r\n    if (response.Error) throw Error(response.Error);\r\n    if (!response.ok) throw Error(response.statusText);\r\n    return response;\r\n  }\r\n\r\n  // This function takes the array of IDs, loops through and makes an API call for each iteration then stores it in an array. That new array will be set to the\r\n  // state object which we will use to iterate over to display the data to the user.\r\n  const loopIds = (dArray) => {\r\n    setLoading(true);\r\n    let arrayBuilder = [];\r\n    dArray.map((d) => {\r\n      fetch(`https://www.omdbapi.com/?i=${d}&apikey=${apiKey}`)\r\n        .then(handleErrors)\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          arrayBuilder.push(data);\r\n        })\r\n        .catch((error) => console.log(error));\r\n    });\r\n    setTimeout(function () {\r\n      setLoading(false);\r\n      setAllData(arrayBuilder);\r\n      console.log(arrayBuilder);\r\n      if (arrayBuilder.length === 0 || arrayBuilder[0].Response === \"False\") {\r\n        setNoResults(\"no results found\");\r\n        setDataNum(\"0\");\r\n      } else {\r\n        setDataNum(arrayBuilder.length);\r\n      }\r\n    }, 3000);\r\n  };\r\n\r\n  // takes the date given by the API and creates mm/dd/yyyy\r\n  const convertDate = (date) => {\r\n    let dateArray = date.split(\" \");\r\n\r\n    let month = dateArray[1];\r\n    let day = dateArray[0];\r\n    let year = dateArray[2];\r\n\r\n    if (month === \"Jan\") {\r\n      month = \"1\";\r\n      return `${month}/${day}/${year}`;\r\n    } else if (month === \"Feb\") {\r\n      month = \"2\";\r\n      return `${month}/${day}/${year}`;\r\n    } else if (month === \"Mar\") {\r\n      month = \"3\";\r\n      return `${month}/${day}/${year}`;\r\n    } else if (month === \"Apr\") {\r\n      month = \"4\";\r\n      return `${month}/${day}/${year}`;\r\n    } else if (month === \"May\") {\r\n      month = \"5\";\r\n      return `${month}/${day}/${year}`;\r\n    } else if (month === \"Jun\") {\r\n      month = \"6\";\r\n      return `${month}/${day}/${year}`;\r\n    } else if (month === \"Jul\") {\r\n      month = \"7\";\r\n      return `${month}/${day}/${year}`;\r\n    } else if (month === \"Aug\") {\r\n      month = \"8\";\r\n      return `${month}/${day}/${year}`;\r\n    } else if (month === \"Sep\") {\r\n      month = \"9\";\r\n      return `${month}/${day}/${year}`;\r\n    } else if (month === \"Oct\") {\r\n      month = \"10\";\r\n      return `${month}/${day}/${year}`;\r\n    } else if (month === \"Nov\") {\r\n      month = \"11\";\r\n      return `${month}/${day}/${year}`;\r\n    } else if (month === \"Dec\") {\r\n      month = \"12\";\r\n      return `${month}/${day}/${year}`;\r\n    }\r\n  };\r\n\r\n  const renderData = allData\r\n    ? allData.map((d, i) => {\r\n        // This takes off the \"min\" off the end of the string. Requested formatting from Bob\r\n        const rtString = d.Runtime\r\n          ? d.Runtime.substring(0, d.Runtime.length - 3)\r\n          : null;\r\n        const date = d.Released ? convertDate(d.Released) : null;\r\n\r\n        return (\r\n          <tr key={i}>\r\n            <td>{d.imdbID}</td>\r\n            <td>{d.Title}</td>\r\n            <td>{rtString}</td>\r\n            <td>{d.Year}</td>\r\n            <td>{d.Director}</td>\r\n            <td>{d.Actors}</td>\r\n            <td>{d.Poster}</td>\r\n            <td>{d.Language}</td>\r\n            <td>{d.Country}</td>\r\n            <td>{date}</td>\r\n          </tr>\r\n        );\r\n      })\r\n    : null;\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"form-wrapper\">\r\n        <form onSubmit={handleSubmit}>\r\n          <input type=\"text\" onChange={getInputValue} />\r\n          {respError ? (\r\n            <Alert variant=\"danger\" className=\"alerts\">\r\n              {respError}\r\n            </Alert>\r\n          ) : null}\r\n          <button type=\"submit\" className=\"submit-button\">\r\n            Search\r\n          </button>\r\n          <p>\r\n            You searched for <span className=\"data-num\">{dataNum}</span>\r\n            <span>&nbsp;{dataNum === 1 ? \"title\" : \"titles\"}</span>\r\n          </p>\r\n        </form>\r\n      </div>\r\n      {loading ? (\r\n        <div className=\"spinner-wrapper\">\r\n          <Spinner animation=\"border\" role=\"status\">\r\n            <span className=\"visually-hidden\">Loading...</span>\r\n          </Spinner>\r\n        </div>\r\n      ) : (\r\n        <div className=\"table-container\">\r\n          <Table striped bordered hover size=\"sm\" responsive>\r\n            <thead>\r\n              <tr>\r\n                <th>IMDB ID</th>\r\n                <th>Title Name</th>\r\n                <th>Run time</th>\r\n                <th>Release year</th>\r\n                <th>Director name</th>\r\n                <th>Actors</th>\r\n                <th>Poster URL</th>\r\n                <th>Language</th>\r\n                <th>Country of origin</th>\r\n                <th>Release date</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>{renderData}</tbody>\r\n          </Table>\r\n          {noResults ? (\r\n            <Alert variant=\"warning\" className=\"alerts\">\r\n              {noResults}\r\n            </Alert>\r\n          ) : null}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}